use crate::types::Hmac;
use crate::types::{HSha256, HSha512};
use crate::types::{HmacSha256, HmacSha512};

global IPAD: u8 = 0x36;
global OPAD: u8 = 0x5C;


/// @brief computes HMAC for secret key `key` and message `msg` based on the specification 
///        in `https://datatracker.ietf.org/doc/html/rfc2104` using a generic interface that
///        allows support for multiple hash algos.
///
/// example:
///     let key = [
///         0x97, 0x79, 0xd9, 0x12, 0x06, 0x42, 0x79, 0x7f, 0x17, 0x47, 
///         0x02, 0x5d, 0x5b, 0x22, 0xb7, 0xac, 0x60, 0x7c, 0xab, 0x08, 
///         0xe1, 0x75, 0x8f, 0x2f, 0x3a, 0x46, 0xc8, 0xbe, 0x1e, 0x25, 
///         0xc5, 0x3b, 0x8c, 0x6a, 0x8f, 0x58, 0xff, 0xef, 0xa1, 0x76
///     ];
///     let message = [
///         0xb1, 0x68, 0x9c, 0x25, 0x91, 0xea, 0xf3, 0xc9, 0xe6, 0x60, 
///         0x70, 0xf8, 0xa7, 0x79, 0x54, 0xff, 0xb8, 0x17, 0x49, 0xf1, 
///         0xb0, 0x03, 0x46, 0xf9, 0xdf, 0xe0, 0xb2, 0xee, 0x90, 0x5d, 
///         0xcc, 0x28, 0x8b, 0xaf, 0x4a, 0x92, 0xde, 0x3f, 0x40, 0x01, 
///         0xdd, 0x9f, 0x44, 0xc4, 0x68, 0xc3, 0xd0, 0x7d, 0x6c, 0x6e, 
///         0xe8, 0x2f, 0xac, 0xea, 0xfc, 0x97, 0xc2, 0xfc, 0x0f, 0xc0, 
///         0x60, 0x17, 0x19, 0xd2, 0xdc, 0xd0, 0xaa, 0x2a, 0xec, 0x92, 
///         0xd1, 0xb0, 0xae, 0x93, 0x3c, 0x65, 0xeb, 0x06, 0xa0, 0x3c, 
///         0x9c, 0x93, 0x5c, 0x2b, 0xad, 0x04, 0x59, 0x81, 0x02, 0x41, 
///         0x34, 0x7a, 0xb8, 0x7e, 0x9f, 0x11, 0xad, 0xb3, 0x04, 0x15, 
///         0x42, 0x4c, 0x6c, 0x7f, 0x5f, 0x22, 0xa0, 0x03, 0xb8, 0xab, 
///         0x8d, 0xe5, 0x4f, 0x6d, 0xed, 0x0e, 0x3a, 0xb9, 0x24, 0x5f, 
///         0xa7, 0x95, 0x68, 0x45, 0x1d, 0xfa, 0x25, 0x8e
///     ];
///     let H: HSha256 = HmacSha256 {}
///     H.hmac(key, message)


pub fn hmac<let MsgSize: u32, let KeySize: u32, let OutputSize: u32, let BlockSize: u32, T>(
    hasher: T,
    key: [u8; KeySize],
    msg: [u8; MsgSize]
) -> [u8; OutputSize]
    where T: Hmac<OutputSize, BlockSize>
{
    let mut blocked_key: [u8; BlockSize] = [0; BlockSize];
    if KeySize > BlockSize {
        let key_hash: [u8; OutputSize] = hasher.hash(key);
        for i in 0..OutputSize {
            blocked_key[i] = key_hash[i];
        }
    } else {
        for i in 0..KeySize {
            blocked_key[i] = key[i];
        }
    }

    let inner_pad: [u8; BlockSize] = [IPAD; BlockSize];
    let inner_key_pad = xor(inner_pad, blocked_key);

    let mut inner_key_pad_extended: [u8; MsgSize+BlockSize] = [0; MsgSize+BlockSize];
    for i in 0..BlockSize {
        inner_key_pad_extended[i] = inner_key_pad[i];
    }
    for i in BlockSize..(BlockSize+MsgSize) {
        inner_key_pad_extended[i] = msg[i-BlockSize];
    }

    let inner_hash = hasher.hash(inner_key_pad_extended);

    let outer_pad: [u8; BlockSize] = [OPAD; BlockSize];
    let outer_key_pad = xor(outer_pad, blocked_key);

    let mut outer_key_pad_extended: [u8; OutputSize+BlockSize] = [0; OutputSize+BlockSize];
    for i in 0..BlockSize {
        outer_key_pad_extended[i] = outer_key_pad[i];
    }
    for i in BlockSize..(BlockSize+OutputSize) {
        outer_key_pad_extended[i] = inner_hash[i-BlockSize];
    }

    hasher.hash(outer_key_pad_extended)
}

fn xor<let N: u32>(a: [u8; N], b: [u8; N]) -> [u8; N] {
    let mut result = [0; N];
    for i in 0..N {
        result[i] = a[i] ^ b[i];
    }
    result
}



#[test]
fn hmac_sha256_test() {
    let H: HSha256 = HmacSha256 {};
    let key_1 = "Jefe".as_bytes();
    let message_1 = "what do ya want for nothing?".as_bytes();
    let expected_mac_tag_bytes_1 = [0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e, 0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xc7, 0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83, 0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43];

    assert(expected_mac_tag_bytes_1 == hmac(H, key_1, message_1));

    let key_2 = [0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b];
    let message_2 = "Hi There".as_bytes();
    let expected_mac_tag_bytes_2 = [0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53, 0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b, 0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7, 0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7];

    assert(expected_mac_tag_bytes_2 == hmac(H, key_2, message_2));

    let key_3 = [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa];
    let message_3 = [0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd];
    let expected_mac_tag_bytes_3 = [0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0x0e, 0x46, 0x85, 0x4d, 0xb8, 0xeb, 0xd0, 0x91, 0x81, 0xa7, 0x29, 0x59, 0x09, 0x8b, 0x3e, 0xf8, 0xc1, 0x22, 0xd9, 0x63, 0x55, 0x14, 0xce, 0xd5, 0x65, 0xfe];

    assert(expected_mac_tag_bytes_3 == hmac(H, key_3, message_3));

}

#[test]
fn hmac_sha512_test() {
    let H: HSha512 = HmacSha512 {};

    let key_1 = "Jefe".as_bytes();
    let message_1 = "what do ya want for nothing?".as_bytes();
    let expected_mac_tag_bytes_1 = [0x16, 0x4b, 0x7a, 0x7b, 0xfc, 0xf8, 0x19, 0xe2, 0xe3, 0x95, 0xfb, 0xe7, 0x3b, 0x56, 0xe0, 0xa3, 0x87, 0xbd, 0x64, 0x22, 0x2e, 0x83, 0x1f, 0xd6, 0x10, 0x27, 0x0c, 0xd7, 0xea, 0x25, 0x05, 0x54, 0x97, 0x58, 0xbf, 0x75, 0xc0, 0x5a, 0x99, 0x4a, 0x6d, 0x03, 0x4f, 0x65, 0xf8, 0xf0, 0xe6, 0xfd, 0xca, 0xea, 0xb1, 0xa3, 0x4d, 0x4a, 0x6b, 0x4b, 0x63, 0x6e, 0x07, 0x0a, 0x38, 0xbc, 0xe7, 0x37];

    assert(expected_mac_tag_bytes_1 == hmac(H, key_1, message_1));

    let key_2 = [0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b];
    let message_2 = "Hi There".as_bytes();
    let expected_mac_tag_bytes_2 = [0x87, 0xaa, 0x7c, 0xde, 0xa5, 0xef, 0x61, 0x9d, 0x4f, 0xf0, 0xb4, 0x24, 0x1a, 0x1d, 0x6c, 0xb0, 0x23, 0x79, 0xf4, 0xe2, 0xce, 0x4e, 0xc2, 0x78, 0x7a, 0xd0, 0xb3, 0x05, 0x45, 0xe1, 0x7c, 0xde, 0xda, 0xa8, 0x33, 0xb7, 0xd6, 0xb8, 0xa7, 0x02, 0x03, 0x8b, 0x27, 0x4e, 0xae, 0xa3, 0xf4, 0xe4, 0xbe, 0x9d, 0x91, 0x4e, 0xeb, 0x61, 0xf1, 0x70, 0x2e, 0x69, 0x6c, 0x20, 0x3a, 0x12, 0x68, 0x54];

    assert(expected_mac_tag_bytes_2 == hmac(H, key_2, message_2));
}