use crate::types::{Hasher, HmacHasher, Sha256Hasher};
use crate::utils;

global IPAD: u8 = 0x36;
global OPAD: u8 = 0x5C;

/// @brief Computes the HMAC of a message using a specified hash function and a secret key.
///
/// This function implements the algorithm described in [RFC 2104](https://datatracker.ietf.org/doc/html/rfc2104),
/// using a generic interface for the underlying hash function. By accepting a generic hasher, the
/// function supports multiple hash algorithms (e.g., SHA-256, SHA-512), provided they implement
/// the necessary interface.
///
/// # Example
/// ```
/// // Example usage with an assumed `Sha256Hasher` type that implements the necessary traits
/// let key = [
///     0x97, 0x79, 0xd9, 0x12, 0x06, 0x42, 0x79, 0x7f, 0x17, 0x47,
///     0x02, 0x5d, 0x5b, 0x22, 0xb7, 0xac, 0x60, 0x7c, 0xab, 0x08,
///     0xe1, 0x75, 0x8f, 0x2f, 0x3a, 0x46, 0xc8, 0xbe, 0x1e, 0x25,
///     0xc5, 0x3b, 0x8c, 0x6a, 0x8f, 0x58, 0xff, 0xef, 0xa1, 0x76
/// ];
/// let message = [
///     0xb1, 0x68, 0x9c, 0x25, 0x91, 0xea, 0xf3, 0xc9, 0xe6, 0x60,
///     0x70, 0xf8, 0xa7, 0x79, 0x54, 0xff, 0xb8, 0x17, 0x49, 0xf1,
///     0xb0, 0x03, 0x46, 0xf9, 0xdf, 0xe0, 0xb2, 0xee, 0x90, 0x5d,
///     0xcc, 0x28, 0x8b, 0xaf, 0x4a, 0x92, 0xde, 0x3f, 0x40, 0x01,
///     0xdd, 0x9f, 0x44, 0xc4, 0x68, 0xc3, 0xd0, 0x7d, 0x6c, 0x6e,
///     0xe8, 0x2f, 0xac, 0xea, 0xfc, 0x97, 0xc2, 0xfc, 0x0f, 0xc0,
///     0x60, 0x17, 0x19, 0xd2, 0xdc, 0xd0, 0xaa, 0x2a, 0xec, 0x92,
///     0xd1, 0xb0, 0xae, 0x93, 0x3c, 0x65, 0xeb, 0x06, 0xa0, 0x3c,
///     0x9c, 0x93, 0x5c, 0x2b, 0xad, 0x04, 0x59, 0x81, 0x02, 0x41,
///     0x34, 0x7a, 0xb8, 0x7e, 0x9f, 0x11, 0xad, 0xb3, 0x04, 0x15,
///     0x42, 0x4c, 0x6c, 0x7f, 0x5f, 0x22, 0xa0, 0x03, 0xb8, 0xab,
///     0x8d, 0xe5, 0x4f, 0x6d, 0xed, 0x0e, 0x3a, 0xb9, 0x24, 0x5f,
///     0xa7, 0x95, 0x68, 0x45, 0x1d, 0xfa, 0x25, 0x8e
/// ];
/// let H: Sha256Hasher = Hasher {};
/// let tag = hmac(H, key, message);
/// ```

pub fn hmac<let MsgSize: u32, let KeySize: u32, let OutputSize: u32, let BlockSize: u32, T>(
    hasher: T,
    key: [u8; KeySize],
    msg: [u8; MsgSize],
) -> [u8; OutputSize]
where
    T: HmacHasher<OutputSize, BlockSize>,
{
    /// Safety: compute blocked key.
    let blocked_key: [u8; BlockSize] = unsafe { utils::__compute_blocked_key(hasher, key) };

    if KeySize > BlockSize {
        let key_hash: [u8; OutputSize] = hasher.hash(key);
        for i in 0..OutputSize {
            assert_eq(key_hash[i], blocked_key[i]);
        }
        for i in OutputSize..BlockSize {
            assert_eq(blocked_key[i], 0);
        }
    } else {
        for i in 0..KeySize {
            assert_eq(blocked_key[i], key[i]);
        }
        for i in KeySize..BlockSize {
            assert_eq(blocked_key[i], 0);
        }
    }

    /// Safety: compute extended inner key padding.
    let inner_key_pad_extended: [u8; BlockSize + MsgSize] =
        unsafe { utils::__compute_key_pad_ext(IPAD, blocked_key, msg) };

    for i in 0..BlockSize {
        assert_eq(blocked_key[i] ^ IPAD, inner_key_pad_extended[i]);
    }
    for i in BlockSize..(BlockSize + MsgSize) {
        assert_eq(inner_key_pad_extended[i], msg[i - BlockSize]);
    }

    /// Safety: compute hash('extended inner key padding')
    let inner_hash: [u8; OutputSize] = unsafe { hasher.hash_unconstrained(inner_key_pad_extended) };

    assert_eq(hasher.hash(inner_key_pad_extended), inner_hash);

    /// Safety: compute extended outer key padding.
    let outer_key_pad_extended: [u8; OutputSize + BlockSize] =
        unsafe { utils::__compute_key_pad_ext(OPAD, blocked_key, inner_hash) };

    for i in 0..BlockSize {
        assert(blocked_key[i] ^ OPAD == outer_key_pad_extended[i]);
    }
    for i in BlockSize..BlockSize + OutputSize {
        assert_eq(outer_key_pad_extended[i], inner_hash[i - BlockSize]);
    }

    hasher.hash(outer_key_pad_extended)
}

pub fn hmac_sha256<let MsgSize: u32, let KeySize: u32>(
    key: [u8; KeySize],
    msg: [u8; MsgSize],
) -> [u8; 32] {
    let H: Sha256Hasher = Hasher {};
    hmac(H, key, msg)
}

#[test]
fn hmac_sha256_test() {
    let H: Sha256Hasher = Hasher {};

    let key_1 = "Jefe".as_bytes();
    let message_1 = "what do ya want for nothing?".as_bytes();
    let expected_mac_tag_bytes_1 = [
        0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e, 0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75,
        0xc7, 0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83, 0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec,
        0x38, 0x43,
    ];

    assert_eq(expected_mac_tag_bytes_1, hmac(H, key_1, message_1));

    let key_2 = [
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
    ];
    let message_2 = "Hi There".as_bytes();
    let expected_mac_tag_bytes_2 = [
        0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53, 0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1,
        0x2b, 0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7, 0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32,
        0xcf, 0xf7,
    ];

    assert_eq(expected_mac_tag_bytes_2, hmac(H, key_2, message_2));

    let key_3 = [
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    ];
    let message_3 = [
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
    ];
    let expected_mac_tag_bytes_3 = [
        0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0x0e, 0x46, 0x85, 0x4d, 0xb8, 0xeb, 0xd0, 0x91, 0x81,
        0xa7, 0x29, 0x59, 0x09, 0x8b, 0x3e, 0xf8, 0xc1, 0x22, 0xd9, 0x63, 0x55, 0x14, 0xce, 0xd5,
        0x65, 0xfe,
    ];

    assert_eq(expected_mac_tag_bytes_3, hmac(H, key_3, message_3));

    let key_4: [u8; 131] = [0xaa; 131];
    let message_4: [u8; 152] = [
        0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20,
        0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20,
        0x74, 0x68, 0x61, 0x6e, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73, 0x69, 0x7a, 0x65,
        0x20, 0x6b, 0x65, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x72, 0x67,
        0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73,
        0x69, 0x7a, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6b,
        0x65, 0x79, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20,
        0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x62,
        0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
        0x65, 0x20, 0x48, 0x4d, 0x41, 0x43, 0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
        0x6d, 0x2e,
    ];
    let expected_mac_tag_bytes_4 = [
        0x9b, 0x09, 0xff, 0xa7, 0x1b, 0x94, 0x2f, 0xcb, 0x27, 0x63, 0x5f, 0xbc, 0xd5, 0xb0, 0xe9,
        0x44, 0xbf, 0xdc, 0x63, 0x64, 0x4f, 0x07, 0x13, 0x93, 0x8a, 0x7f, 0x51, 0x53, 0x5c, 0x3a,
        0x35, 0xe2,
    ];

    assert_eq(expected_mac_tag_bytes_4, hmac(H, key_4, message_4));

    let key_5: [u8; 131] = [0xaa; 131];
    // 54-byte message: "Test Using Larger Than Block-Size Key - Hash Key First"
    let message_5: [u8; 54] = [
        84, 101, 115, 116, 32, 85, 115, 105, 110, 103, 32, 76, 97, 114, 103, 101, 114, 32, 84, 104,
        97, 110, 32, 66, 108, 111, 99, 107, 45, 83, 105, 122, 101, 32, 75, 101, 121, 32, 45, 32, 72,
        97, 115, 104, 32, 75, 101, 121, 32, 70, 105, 114, 115, 116,
    ];
    let expected_mac_tag_bytes_5: [u8; 32] = [
        0x60, 0xe4, 0x31, 0x59, 0x1e, 0xe0, 0xb6, 0x7f, 0x0d, 0x8a, 0x26, 0xaa, 0xcb, 0xf5, 0xb7,
        0x7f, 0x8e, 0x0b, 0xc6, 0x21, 0x37, 0x28, 0xc5, 0x14, 0x05, 0x46, 0x04, 0x0f, 0x0e, 0xe3,
        0x7f, 0x54,
    ];

    assert_eq(expected_mac_tag_bytes_5, hmac(H, key_5, message_5));

    let key_6: [u8; 25] = [
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
    ];
    let message_6: [u8; 50] = [
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
    ];
    let expected_mac_tag_bytes_6: [u8; 32] = [
        0x82, 0x55, 0x8a, 0x38, 0x9a, 0x44, 0x3c, 0x0e, 0xa4, 0xcc, 0x81, 0x98, 0x99, 0xf2, 0x08,
        0x3a, 0x85, 0xf0, 0xfa, 0xa3, 0xe5, 0x78, 0xf8, 0x07, 0x7a, 0x2e, 0x3f, 0xf4, 0x67, 0x29,
        0x66, 0x5b,
    ];

    assert_eq(expected_mac_tag_bytes_6, hmac(H, key_6, message_6));
}
